// <auto-generated />
using System;
using KODPersonalAccount.Applications.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KODPersonalAccount.Applications.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250301154428_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Attendances", b =>
                {
                    b.Property<long>("AttendancesId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uuid");

                    b.HasKey("AttendancesId", "LessonId");

                    b.HasIndex("LessonId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("KODPersonalAccount.Models.Entity.Direction", b =>
                {
                    b.Property<string>("Title")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Title");

                    b.ToTable("Directions", (string)null);
                });

            modelBuilder.Entity("KODPersonalAccount.Models.Entity.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Direction")
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Schedule")
                        .HasColumnType("text");

                    b.Property<int>("StudyYears")
                        .HasColumnType("integer");

                    b.Property<long?>("TeacherId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Direction");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups", (string)null);
                });

            modelBuilder.Entity("KODPersonalAccount.Models.Entity.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("RecordLink")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.HasIndex("GroupId");

                    b.ToTable("Lessons", (string)null);
                });

            modelBuilder.Entity("KODPersonalAccount.Models.Entity.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("ExpiresToken")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Points")
                        .HasColumnType("real");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TgUsername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("StudentToGroup", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<long>("StudentsId")
                        .HasColumnType("bigint");

                    b.HasKey("GroupId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("StudentToGroup");
                });

            modelBuilder.Entity("Attendances", b =>
                {
                    b.HasOne("KODPersonalAccount.Models.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("AttendancesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KODPersonalAccount.Models.Entity.Lesson", null)
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KODPersonalAccount.Models.Entity.Group", b =>
                {
                    b.HasOne("KODPersonalAccount.Models.Entity.Direction", null)
                        .WithMany()
                        .HasForeignKey("Direction")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KODPersonalAccount.Models.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("KODPersonalAccount.Models.Entity.Lesson", b =>
                {
                    b.HasOne("KODPersonalAccount.Models.Entity.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StudentToGroup", b =>
                {
                    b.HasOne("KODPersonalAccount.Models.Entity.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KODPersonalAccount.Models.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
